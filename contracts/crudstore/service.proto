syntax = "proto3";

package contracts.crudstore;
option go_package = "github.com/makkalot/eskit/generated/grpc/go/crudstore";

import "common/originator.proto";
import "crudstore/schema.proto";
import "google/api/annotations.proto";


message CreateRequest {
    // entity type of the object, could be User, Project and etc
    string entity_type = 1;
    // originator of the object, if not supplied it'll be auto generated
    contracts.common.Originator originator = 2;
    // payload is a json valid string that has the body of the object
    string payload = 3;
}


message CreateResponse {
    contracts.common.Originator originator = 1;
}

message UpdateRequest {
    // entity type of the object, could be User, Project and etc
    string entity_type = 1;
    // originator of the object
    contracts.common.Originator originator = 2;
    // payload is a json valid string that has the body of the object
    string payload = 3;
}

message UpdateResponse {
    contracts.common.Originator originator = 1;
}


message DeleteRequest {
    string entity_type = 1;
    // originator is the id of the object
    contracts.common.Originator originator = 2;
}

message DeleteResponse {
    // originator is the id of the object
    contracts.common.Originator originator = 1;
}


message GetRequest {
    // something like User, Project and etc
    string entity_type = 1;
    // originator is the id of the object
    contracts.common.Originator originator = 2;
    // fetch deleted
    bool deleted = 3;
}


message GetResponse {
    contracts.common.Originator originator = 1;
    // json representation of the body
    string payload = 2;
}


message ListRequest {
    // entity type is required parameter
    string entity_type = 1;
    // pagination id is optional if not supplied starts scanning from the beginning
    string pagination_id = 2;
    // optional, if not supplied it's 10
    uint32 limit = 3;
    bool skip_payload = 4;
}

message ListResponseItem {
    string entity_type = 1;
    contracts.common.Originator originator = 2;
    string payload = 3;
}

message ListResponse {
    repeated ListResponseItem results = 1;
    string next_page_id = 2;
}


message RegisterTypeRequest {
    CrudEntitySpec spec = 1;
    // if the record already exists it doesn't error
    bool skip_duplicate = 2;
}

message RegisterTypeResponse {
}

message GetTypeRequest {
    string entity_type = 1;
}

message GetTypeResponse {
    CrudEntitySpec spec = 1;
}

message UpdateTypeRequest {
    CrudEntitySpec spec = 1;
}

message UpdateTypeResponse {
}

message ListTypesRequest {
    // optional, if not supplied it's 20
    uint32 limit = 1;
}


message ListTypesResponse {
    repeated CrudEntitySpec results = 1;
}

message HealthRequest {
}

message HealthResponse {
    string message = 1;
}


service CrudStoreService {

    rpc Healtz (HealthRequest) returns (HealthResponse) {
        option (google.api.http) = {
            get: "/v1/healtz"
        };
    }

    rpc Create (CreateRequest) returns (CreateResponse) {
    }

    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }

    rpc Delete (DeleteRequest) returns (DeleteResponse) {
    }

    rpc Get (GetRequest) returns (GetResponse) {
    }

    // List endpoint is a debug endpoint and could be very slow
    // for objects with lots of events, if want faster list access
    // use a proper read model and create a different service endpoint for it
    // also note that it can return duplicate results as well for different pages
    rpc List (ListRequest) returns (ListResponse) {

    }

    rpc RegisterType (RegisterTypeRequest) returns (RegisterTypeResponse) {
    }

    // The request is eventually consistent
    rpc GetType (GetTypeRequest) returns (GetTypeResponse) {
    }

    // updates the type and the schema
    rpc UpdateType (UpdateTypeRequest) returns (UpdateTypeResponse) {
    }

    // it's for debugging purposes might be a bit slow, for better results
    // use a different index
    rpc ListTypes (ListTypesRequest) returns (ListTypesResponse) {

    }

}


